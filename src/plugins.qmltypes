import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable org.kde.elisa 1.0 .'

Module {
    dependencies: ["QtQuick 2.8"]
    Component {
        name: "AbstractMediaProxyModel"
        prototype: "QSortFilterProxyModel"
        Property { name: "filterText"; type: "string" }
        Property { name: "filterRating"; type: "int" }
        Signal {
            name: "filterTextChanged"
            Parameter { name: "filterText"; type: "string" }
        }
        Signal {
            name: "filterRatingChanged"
            Parameter { name: "filterRating"; type: "int" }
        }
        Method {
            name: "setFilterText"
            Parameter { name: "filterText"; type: "string" }
        }
        Method {
            name: "setFilterRating"
            Parameter { name: "filterRating"; type: "int" }
        }
    }
    Component {
        name: "AllAlbumsProxyModel"
        prototype: "AbstractMediaProxyModel"
        exports: ["org.kde.elisa/AllAlbumsProxyModel 1.0"]
        exportMetaObjectRevisions: [0]
        Signal {
            name: "albumToEnqueue"
            Parameter { name: "newAlbums"; type: "QList<MusicAlbum>" }
            Parameter { name: "enqueueMode"; type: "ElisaUtils::PlayListEnqueueMode" }
            Parameter { name: "triggerPlay"; type: "ElisaUtils::PlayListEnqueueTriggerPlay" }
        }
        Method { name: "enqueueToPlayList" }
        Method { name: "replaceAndPlayOfPlayList" }
    }
    Component {
        name: "AllArtistsProxyModel"
        prototype: "AbstractMediaProxyModel"
        exports: ["org.kde.elisa/AllArtistsProxyModel 1.0"]
        exportMetaObjectRevisions: [0]
        Signal {
            name: "artistToEnqueue"
            Parameter { name: "artistNames"; type: "QList<QString>" }
            Parameter { name: "enqueueMode"; type: "ElisaUtils::PlayListEnqueueMode" }
            Parameter { name: "triggerPlay"; type: "ElisaUtils::PlayListEnqueueTriggerPlay" }
        }
        Method { name: "enqueueToPlayList" }
        Method { name: "replaceAndPlayOfPlayList" }
    }
    Component {
        name: "AllTracksProxyModel"
        prototype: "AbstractMediaProxyModel"
        exports: ["org.kde.elisa/AllTracksProxyModel 1.0"]
        exportMetaObjectRevisions: [0]
        Signal {
            name: "trackToEnqueue"
            Parameter { name: "newTracks"; type: "QList<MusicAudioTrack>" }
            Parameter { name: "enqueueMode"; type: "ElisaUtils::PlayListEnqueueMode" }
            Parameter { name: "triggerPlay"; type: "ElisaUtils::PlayListEnqueueTriggerPlay" }
        }
        Method { name: "enqueueToPlayList" }
        Method { name: "replaceAndPlayOfPlayList" }
    }
    Component {
        name: "AudioWrapper"
        prototype: "QObject"
        exports: ["org.kde.elisa/AudioWrapper 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "muted"; type: "bool" }
        Property { name: "volume"; type: "double" }
        Property { name: "source"; type: "QUrl" }
        Property { name: "status"; type: "QMediaPlayer::MediaStatus"; isReadonly: true }
        Property { name: "playbackState"; type: "QMediaPlayer::State"; isReadonly: true }
        Property { name: "error"; type: "QMediaPlayer::Error"; isReadonly: true }
        Property { name: "duration"; type: "qlonglong"; isReadonly: true }
        Property { name: "position"; type: "qlonglong" }
        Property { name: "seekable"; type: "bool"; isReadonly: true }
        Property { name: "audioRole"; type: "QAudio::Role" }
        Signal { name: "playing" }
        Signal { name: "paused" }
        Signal { name: "stopped" }
        Method {
            name: "setMuted"
            Parameter { name: "muted"; type: "bool" }
        }
        Method {
            name: "setVolume"
            Parameter { name: "volume"; type: "double" }
        }
        Method {
            name: "setSource"
            Parameter { name: "source"; type: "QUrl" }
        }
        Method {
            name: "setPosition"
            Parameter { name: "position"; type: "qlonglong" }
        }
        Method { name: "play" }
        Method { name: "pause" }
        Method { name: "stop" }
        Method {
            name: "seek"
            Parameter { name: "position"; type: "int" }
        }
        Method {
            name: "setAudioRole"
            Parameter { name: "audioRole"; type: "QAudio::Role" }
        }
    }
    Component {
        name: "ElisaApplication"
        prototype: "QObject"
        exports: ["org.kde.elisa/ElisaApplication 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "arguments"; type: "QStringList" }
        Property {
            name: "musicManager"
            type: "MusicListenersManager"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "allAlbumsProxyModel"
            type: "AllAlbumsProxyModel"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "allArtistsProxyModel"
            type: "AllArtistsProxyModel"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "allTracksProxyModel"
            type: "AllTracksProxyModel"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "singleArtistProxyModel"
            type: "SingleArtistProxyModel"
            isReadonly: true
            isPointer: true
        }
        Property {
            name: "singleAlbumProxyModel"
            type: "SingleAlbumProxyModel"
            isReadonly: true
            isPointer: true
        }
        Property { name: "mediaPlayList"; type: "MediaPlayList"; isReadonly: true; isPointer: true }
        Property { name: "audioPlayer"; type: "AudioWrapper"; isReadonly: true; isPointer: true }
        Signal {
            name: "enqueue"
            Parameter { name: "files"; type: "QStringList" }
        }
        Method { name: "appHelpActivated" }
        Method { name: "aboutApplication" }
        Method { name: "reportBug" }
        Method { name: "configureShortcuts" }
        Method { name: "configureElisa" }
        Method {
            name: "setArguments"
            Parameter { name: "newArguments"; type: "QStringList" }
        }
        Method {
            name: "activateActionRequested"
            Parameter { name: "actionName"; type: "string" }
            Parameter { name: "parameter"; type: "QVariant" }
        }
        Method {
            name: "activateRequested"
            Parameter { name: "arguments"; type: "QStringList" }
            Parameter { name: "workingDirectory"; type: "string" }
        }
        Method {
            name: "openRequested"
            Parameter { name: "uris"; type: "QList<QUrl>" }
        }
        Method { name: "initialize" }
        Method {
            name: "action"
            type: "QAction*"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "iconName"
            type: "string"
            Parameter { name: "icon"; type: "QIcon" }
        }
    }
    Component {
        name: "ManageAudioPlayer"
        prototype: "QObject"
        exports: ["org.kde.elisa/ManageAudioPlayer 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "PlayerPlaybackState"
            values: {
                "PlayingState": 1,
                "PausedState": 2,
                "StoppedState": 0
            }
        }
        Property { name: "currentTrack"; type: "QPersistentModelIndex" }
        Property { name: "playListModel"; type: "QAbstractItemModel"; isPointer: true }
        Property { name: "playerSource"; type: "QUrl"; isReadonly: true }
        Property { name: "titleRole"; type: "int" }
        Property { name: "artistNameRole"; type: "int" }
        Property { name: "albumNameRole"; type: "int" }
        Property { name: "urlRole"; type: "int" }
        Property { name: "isPlayingRole"; type: "int" }
        Property { name: "playerStatus"; type: "QMediaPlayer::MediaStatus" }
        Property { name: "playerPlaybackState"; type: "int" }
        Property { name: "playerError"; type: "QMediaPlayer::Error" }
        Property { name: "audioDuration"; type: "int" }
        Property { name: "playerIsSeekable"; type: "bool" }
        Property { name: "playerPosition"; type: "int" }
        Property { name: "playControlPosition"; type: "int" }
        Property { name: "persistentState"; type: "QVariantMap" }
        Signal { name: "playerPlay" }
        Signal { name: "playerPause" }
        Signal { name: "playerStop" }
        Signal { name: "skipNextTrack" }
        Signal {
            name: "seek"
            Parameter { name: "position"; type: "int" }
        }
        Signal {
            name: "sourceInError"
            Parameter { name: "source"; type: "QUrl" }
            Parameter { name: "playerError"; type: "QMediaPlayer::Error" }
        }
        Signal {
            name: "displayTrackError"
            Parameter { name: "fileName"; type: "string" }
        }
        Method {
            name: "setCurrentTrack"
            Parameter { name: "currentTrack"; type: "QPersistentModelIndex" }
        }
        Method {
            name: "setPlayListModel"
            Parameter { name: "aPlayListModel"; type: "QAbstractItemModel"; isPointer: true }
        }
        Method {
            name: "setUrlRole"
            Parameter { name: "value"; type: "int" }
        }
        Method {
            name: "setIsPlayingRole"
            Parameter { name: "value"; type: "int" }
        }
        Method {
            name: "setPlayerStatus"
            Parameter { name: "playerStatus"; type: "QMediaPlayer::MediaStatus" }
        }
        Method {
            name: "setPlayerPlaybackState"
            Parameter { name: "playerPlaybackState"; type: "int" }
        }
        Method {
            name: "setPlayerError"
            Parameter { name: "playerError"; type: "QMediaPlayer::Error" }
        }
        Method { name: "ensurePause" }
        Method { name: "ensurePlay" }
        Method { name: "playPause" }
        Method {
            name: "setAudioDuration"
            Parameter { name: "audioDuration"; type: "int" }
        }
        Method {
            name: "setPlayerIsSeekable"
            Parameter { name: "playerIsSeekable"; type: "bool" }
        }
        Method {
            name: "setPlayerPosition"
            Parameter { name: "playerPosition"; type: "int" }
        }
        Method {
            name: "setPlayControlPosition"
            Parameter { name: "playerPosition"; type: "int" }
        }
        Method {
            name: "setPersistentState"
            Parameter { name: "persistentStateValue"; type: "QVariantMap" }
        }
        Method {
            name: "playerSeek"
            Parameter { name: "position"; type: "int" }
        }
        Method { name: "playListFinished" }
        Method {
            name: "tracksDataChanged"
            Parameter { name: "topLeft"; type: "QModelIndex" }
            Parameter { name: "bottomRight"; type: "QModelIndex" }
            Parameter { name: "roles"; type: "QVector<int>" }
        }
        Method {
            name: "setTitleRole"
            Parameter { name: "titleRole"; type: "int" }
        }
        Method {
            name: "setArtistNameRole"
            Parameter { name: "artistNameRole"; type: "int" }
        }
        Method {
            name: "setAlbumNameRole"
            Parameter { name: "albumNameRole"; type: "int" }
        }
    }
    Component {
        name: "ManageHeaderBar"
        prototype: "QObject"
        exports: ["org.kde.elisa/ManageHeaderBar 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "currentTrack"; type: "QPersistentModelIndex" }
        Property { name: "playListModel"; type: "QAbstractItemModel"; isPointer: true }
        Property { name: "artistRole"; type: "int" }
        Property { name: "titleRole"; type: "int" }
        Property { name: "albumRole"; type: "int" }
        Property { name: "imageRole"; type: "int" }
        Property { name: "isValidRole"; type: "int" }
        Property { name: "artist"; type: "QVariant"; isReadonly: true }
        Property { name: "title"; type: "QVariant"; isReadonly: true }
        Property { name: "album"; type: "QVariant"; isReadonly: true }
        Property { name: "image"; type: "QUrl"; isReadonly: true }
        Property { name: "isValid"; type: "bool"; isReadonly: true }
        Property { name: "remainingTracks"; type: "int"; isReadonly: true }
        Method {
            name: "setCurrentTrack"
            Parameter { name: "currentTrack"; type: "QPersistentModelIndex" }
        }
        Method {
            name: "setPlayListModel"
            Parameter { name: "aPlayListModel"; type: "QAbstractItemModel"; isPointer: true }
        }
        Method {
            name: "setArtistRole"
            Parameter { name: "value"; type: "int" }
        }
        Method {
            name: "setTitleRole"
            Parameter { name: "value"; type: "int" }
        }
        Method {
            name: "setAlbumRole"
            Parameter { name: "value"; type: "int" }
        }
        Method {
            name: "setImageRole"
            Parameter { name: "value"; type: "int" }
        }
        Method {
            name: "setIsValidRole"
            Parameter { name: "isValidRole"; type: "int" }
        }
        Method {
            name: "playListLayoutChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
            Parameter { name: "hint"; type: "QAbstractItemModel::LayoutChangeHint" }
        }
        Method {
            name: "tracksInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Method {
            name: "tracksDataChanged"
            Parameter { name: "topLeft"; type: "QModelIndex" }
            Parameter { name: "bottomRight"; type: "QModelIndex" }
            Parameter { name: "roles"; type: "QVector<int>" }
        }
        Method {
            name: "tracksAboutToBeMoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
            Parameter { name: "destination"; type: "QModelIndex" }
            Parameter { name: "row"; type: "int" }
        }
        Method {
            name: "tracksMoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
            Parameter { name: "destination"; type: "QModelIndex" }
            Parameter { name: "row"; type: "int" }
        }
        Method {
            name: "tracksRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
    }
    Component {
        name: "ManageMediaPlayerControl"
        prototype: "QObject"
        exports: ["org.kde.elisa/ManageMediaPlayerControl 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "PlayerState"
            values: {
                "Playing": 0,
                "Paused": 1,
                "Stopped": 2
            }
        }
        Property { name: "playControlEnabled"; type: "bool"; isReadonly: true }
        Property { name: "skipBackwardControlEnabled"; type: "bool"; isReadonly: true }
        Property { name: "skipForwardControlEnabled"; type: "bool"; isReadonly: true }
        Property { name: "musicPlaying"; type: "bool"; isReadonly: true }
        Property { name: "playListModel"; type: "QAbstractItemModel"; isPointer: true }
        Property { name: "currentTrack"; type: "QPersistentModelIndex" }
        Property { name: "randomOrContinuePlay"; type: "bool" }
        Method {
            name: "setPlayListModel"
            Parameter { name: "aPlayListModel"; type: "QAbstractItemModel"; isPointer: true }
        }
        Method { name: "playerPaused" }
        Method { name: "playerPlaying" }
        Method { name: "playerStopped" }
        Method {
            name: "setCurrentTrack"
            Parameter { name: "currentTrack"; type: "QPersistentModelIndex" }
        }
        Method {
            name: "setRandomOrContinuePlay"
            Parameter { name: "randomOrContinuePlay"; type: "bool" }
        }
    }
    Component {
        name: "MediaPlayList"
        prototype: "QAbstractListModel"
        exports: ["org.kde.elisa/MediaPlayList 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ColumnsRoles"
            values: {
                "IsValidRole": 257,
                "TitleRole": 258,
                "DurationRole": 259,
                "MilliSecondsDurationRole": 260,
                "TrackDataRole": 261,
                "ArtistRole": 262,
                "AlbumArtistRole": 263,
                "AlbumRole": 264,
                "TrackNumberRole": 265,
                "DiscNumberRole": 266,
                "RatingRole": 267,
                "GenreRole": 268,
                "LyricistRole": 269,
                "ComposerRole": 270,
                "CommentRole": 271,
                "YearRole": 272,
                "ChannelsRole": 273,
                "BitRateRole": 274,
                "SampleRateRole": 275,
                "ImageRole": 276,
                "ResourceRole": 277,
                "CountRole": 278,
                "IsPlayingRole": 279,
                "HasAlbumHeader": 280,
                "IsSingleDiscAlbumHeader": 281,
                "SecondaryTextRole": 282,
                "ImageUrlRole": 283,
                "ShadowForImageRole": 284
            }
        }
        Enum {
            name: "PlayState"
            values: {
                "NotPlaying": 0,
                "IsPlaying": 1,
                "IsPaused": 2
            }
        }
        Property { name: "persistentState"; type: "QVariantMap" }
        Property { name: "musicListenersManager"; type: "MusicListenersManager"; isPointer: true }
        Property { name: "tracksCount"; type: "int"; isReadonly: true }
        Property { name: "currentTrack"; type: "QPersistentModelIndex"; isReadonly: true }
        Property { name: "currentTrackRow"; type: "int"; isReadonly: true }
        Property { name: "randomPlay"; type: "bool" }
        Property { name: "repeatPlay"; type: "bool" }
        Signal {
            name: "newTrackByNameInList"
            Parameter { name: "title"; type: "string" }
            Parameter { name: "artist"; type: "string" }
            Parameter { name: "album"; type: "string" }
            Parameter { name: "trackNumber"; type: "int" }
            Parameter { name: "discNumber"; type: "int" }
        }
        Signal {
            name: "newTrackByFileNameInList"
            Parameter { name: "fileName"; type: "QUrl" }
        }
        Signal {
            name: "newTrackByIdInList"
            Parameter { name: "newTrackId"; type: "qulonglong" }
        }
        Signal {
            name: "newArtistInList"
            Parameter { name: "artist"; type: "string" }
        }
        Signal {
            name: "trackHasBeenAdded"
            Parameter { name: "title"; type: "string" }
            Parameter { name: "image"; type: "QUrl" }
        }
        Signal { name: "playListFinished" }
        Signal { name: "playListLoaded" }
        Signal { name: "playListLoadFailed" }
        Signal { name: "ensurePlay" }
        Method {
            name: "setPersistentState"
            Parameter { name: "persistentState"; type: "QVariantMap" }
        }
        Method {
            name: "removeSelection"
            Parameter { name: "selection"; type: "QList<int>" }
        }
        Method {
            name: "albumAdded"
            Parameter { name: "tracks"; type: "QList<MusicAudioTrack>" }
        }
        Method {
            name: "trackChanged"
            Parameter { name: "track"; type: "MusicAudioTrack" }
        }
        Method {
            name: "trackRemoved"
            Parameter { name: "trackId"; type: "qulonglong" }
        }
        Method {
            name: "setMusicListenersManager"
            Parameter { name: "musicListenersManager"; type: "MusicListenersManager"; isPointer: true }
        }
        Method {
            name: "setRandomPlay"
            Parameter { name: "value"; type: "bool" }
        }
        Method {
            name: "setRepeatPlay"
            Parameter { name: "value"; type: "bool" }
        }
        Method { name: "skipNextTrack" }
        Method { name: "skipPreviousTrack" }
        Method {
            name: "seedRandomGenerator"
            Parameter { name: "seed"; type: "uint" }
        }
        Method {
            name: "switchTo"
            Parameter { name: "row"; type: "int" }
        }
        Method {
            name: "loadPlaylist"
            Parameter { name: "fileName"; type: "QUrl" }
        }
        Method {
            name: "enqueue"
            Parameter { name: "newTrackId"; type: "qulonglong" }
        }
        Method {
            name: "enqueue"
            Parameter { name: "newTrack"; type: "MusicAudioTrack" }
        }
        Method {
            name: "enqueue"
            Parameter { name: "newEntry"; type: "MediaPlayListEntry" }
            Parameter { name: "audioTrack"; type: "MusicAudioTrack" }
        }
        Method {
            name: "enqueue"
            Parameter { name: "newEntry"; type: "MediaPlayListEntry" }
        }
        Method {
            name: "enqueue"
            Parameter { name: "album"; type: "MusicAlbum" }
        }
        Method {
            name: "enqueue"
            Parameter { name: "artist"; type: "MusicArtist" }
        }
        Method {
            name: "enqueue"
            Parameter { name: "artistName"; type: "string" }
        }
        Method {
            name: "enqueue"
            Parameter { name: "fileName"; type: "QUrl" }
        }
        Method {
            name: "enqueue"
            Parameter { name: "files"; type: "QStringList" }
        }
        Method {
            name: "enqueue"
            Parameter { name: "newTrackId"; type: "QList<qulonglong>" }
        }
        Method {
            name: "enqueue"
            Parameter { name: "albums"; type: "QList<MusicAlbum>" }
            Parameter { name: "enqueueMode"; type: "ElisaUtils::PlayListEnqueueMode" }
            Parameter { name: "triggerPlay"; type: "ElisaUtils::PlayListEnqueueTriggerPlay" }
        }
        Method {
            name: "enqueue"
            Parameter { name: "tracks"; type: "QList<MusicAudioTrack>" }
            Parameter { name: "enqueueMode"; type: "ElisaUtils::PlayListEnqueueMode" }
            Parameter { name: "triggerPlay"; type: "ElisaUtils::PlayListEnqueueTriggerPlay" }
        }
        Method {
            name: "enqueueArtists"
            Parameter { name: "artistName"; type: "QList<QString>" }
            Parameter { name: "enqueueMode"; type: "ElisaUtils::PlayListEnqueueMode" }
            Parameter { name: "triggerPlay"; type: "ElisaUtils::PlayListEnqueueTriggerPlay" }
        }
        Method {
            name: "enqueueAndPlay"
            Parameter { name: "files"; type: "QStringList" }
        }
        Method {
            name: "replaceAndPlay"
            Parameter { name: "newTrackId"; type: "qulonglong" }
        }
        Method {
            name: "replaceAndPlay"
            Parameter { name: "newTrack"; type: "MusicAudioTrack" }
        }
        Method {
            name: "replaceAndPlay"
            Parameter { name: "album"; type: "MusicAlbum" }
        }
        Method {
            name: "replaceAndPlay"
            Parameter { name: "artist"; type: "MusicArtist" }
        }
        Method {
            name: "replaceAndPlay"
            Parameter { name: "artistName"; type: "string" }
        }
        Method {
            name: "replaceAndPlay"
            Parameter { name: "fileName"; type: "QUrl" }
        }
        Method {
            name: "trackInError"
            Parameter { name: "sourceInError"; type: "QUrl" }
            Parameter { name: "playerError"; type: "QMediaPlayer::Error" }
        }
        Method {
            name: "removeRows"
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "count"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "removeRows"
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "count"; type: "int" }
        }
        Method {
            name: "moveRows"
            type: "bool"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceRow"; type: "int" }
            Parameter { name: "count"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationChild"; type: "int" }
        }
        Method {
            name: "move"
            Parameter { name: "from"; type: "int" }
            Parameter { name: "to"; type: "int" }
            Parameter { name: "n"; type: "int" }
        }
        Method { name: "clearPlayList" }
        Method {
            name: "savePlaylist"
            type: "bool"
            Parameter { name: "fileName"; type: "QUrl" }
        }
    }
    Component {
        name: "Mpris2"
        prototype: "QObject"
        exports: ["org.kde.elisa/Mpris2 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "playerName"; type: "string" }
        Property { name: "playListModel"; type: "QAbstractItemModel"; isPointer: true }
        Property { name: "playListControler"; type: "MediaPlayList"; isPointer: true }
        Property { name: "audioPlayerManager"; type: "ManageAudioPlayer"; isPointer: true }
        Property { name: "manageMediaPlayerControl"; type: "ManageMediaPlayerControl"; isPointer: true }
        Property { name: "headerBarManager"; type: "ManageHeaderBar"; isPointer: true }
        Property { name: "audioPlayer"; type: "AudioWrapper"; isPointer: true }
        Signal { name: "raisePlayer" }
        Method {
            name: "setPlayerName"
            Parameter { name: "playerName"; type: "string" }
        }
        Method {
            name: "setPlayListModel"
            Parameter { name: "playListModel"; type: "QAbstractItemModel"; isPointer: true }
        }
        Method {
            name: "setPlayListControler"
            Parameter { name: "playListControler"; type: "MediaPlayList"; isPointer: true }
        }
        Method {
            name: "setAudioPlayerManager"
            Parameter { name: "audioPlayerManager"; type: "ManageAudioPlayer"; isPointer: true }
        }
        Method {
            name: "setManageMediaPlayerControl"
            Parameter { name: "manageMediaPlayerControl"; type: "ManageMediaPlayerControl"; isPointer: true }
        }
        Method {
            name: "setHeaderBarManager"
            Parameter { name: "headerBarManager"; type: "ManageHeaderBar"; isPointer: true }
        }
        Method {
            name: "setAudioPlayer"
            Parameter { name: "audioPlayer"; type: "AudioWrapper"; isPointer: true }
        }
    }
    Component {
        name: "MusicListenersManager"
        prototype: "QObject"
        exports: ["org.kde.elisa/MusicListenersManager 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "viewDatabase"; type: "DatabaseInterface"; isReadonly: true; isPointer: true }
        Property { name: "importedTracksCount"; type: "int"; isReadonly: true }
        Property { name: "indexingRunning"; type: "bool"; isReadonly: true }
        Property { name: "elisaApplication"; type: "ElisaApplication"; isPointer: true }
        Property { name: "allAlbumsModel"; type: "QAbstractItemModel"; isReadonly: true; isPointer: true }
        Property {
            name: "allArtistsModel"
            type: "QAbstractItemModel"
            isReadonly: true
            isPointer: true
        }
        Property { name: "allTracksModel"; type: "QAbstractItemModel"; isReadonly: true; isPointer: true }
        Property { name: "albumModel"; type: "QAbstractItemModel"; isReadonly: true; isPointer: true }
        Property { name: "indexerBusy"; type: "bool"; isReadonly: true }
        Signal {
            name: "artistAdded"
            Parameter { name: "newArtist"; type: "MusicArtist" }
        }
        Signal {
            name: "trackAdded"
            Parameter { name: "id"; type: "qulonglong" }
        }
        Signal {
            name: "tracksAdded"
            Parameter { name: "allTracks"; type: "QList<MusicAudioTrack>" }
        }
        Signal {
            name: "artistRemoved"
            Parameter { name: "removedArtist"; type: "MusicArtist" }
        }
        Signal {
            name: "albumRemoved"
            Parameter { name: "removedAlbum"; type: "MusicAlbum" }
            Parameter { name: "removedAlbumId"; type: "qulonglong" }
        }
        Signal {
            name: "trackRemoved"
            Parameter { name: "id"; type: "qulonglong" }
        }
        Signal {
            name: "artistModified"
            Parameter { name: "modifiedArtist"; type: "MusicArtist" }
        }
        Signal {
            name: "albumModified"
            Parameter { name: "modifiedAlbum"; type: "MusicAlbum" }
            Parameter { name: "modifiedAlbumId"; type: "qulonglong" }
        }
        Signal {
            name: "trackModified"
            Parameter { name: "modifiedTrack"; type: "MusicAudioTrack" }
        }
        Signal { name: "applicationIsTerminating" }
        Signal {
            name: "newNotification"
            Parameter { name: "notification"; type: "NotificationItem" }
        }
        Signal {
            name: "closeNotification"
            Parameter { name: "notificationId"; type: "string" }
        }
        Signal {
            name: "removeTracksInError"
            Parameter { name: "tracks"; type: "QList<QUrl>" }
        }
        Signal {
            name: "displayTrackError"
            Parameter { name: "fileName"; type: "string" }
        }
        Method { name: "databaseReady" }
        Method { name: "applicationAboutToQuit" }
        Method { name: "showConfiguration" }
        Method { name: "resetImportedTracksCounter" }
        Method {
            name: "setElisaApplication"
            Parameter { name: "elisaApplication"; type: "ElisaApplication"; isPointer: true }
        }
        Method {
            name: "playBackError"
            Parameter { name: "sourceInError"; type: "QUrl" }
            Parameter { name: "playerError"; type: "QMediaPlayer::Error" }
        }
    }
    Component {
        name: "ProgressIndicator"
        prototype: "QObject"
        exports: ["org.kde.elisa/ProgressIndicator 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "position"; type: "int" }
        Property { name: "progressDuration"; type: "string"; isReadonly: true }
        Method {
            name: "setPosition"
            Parameter { name: "position"; type: "int" }
        }
    }
    Component {
        name: "QAbstractProxyModel"
        prototype: "QAbstractItemModel"
        Property { name: "sourceModel"; type: "QAbstractItemModel"; isPointer: true }
        Method {
            name: "mapToSource"
            type: "QModelIndex"
            Parameter { name: "proxyIndex"; type: "QModelIndex" }
        }
        Method {
            name: "mapFromSource"
            type: "QModelIndex"
            Parameter { name: "sourceIndex"; type: "QModelIndex" }
        }
        Method {
            name: "mapSelectionToSource"
            type: "QItemSelection"
            Parameter { name: "selection"; type: "QItemSelection" }
        }
        Method {
            name: "mapSelectionFromSource"
            type: "QItemSelection"
            Parameter { name: "selection"; type: "QItemSelection" }
        }
    }
    Component {
        name: "QSortFilterProxyModel"
        prototype: "QAbstractProxyModel"
        Property { name: "filterRegExp"; type: "QRegExp" }
        Property { name: "filterKeyColumn"; type: "int" }
        Property { name: "dynamicSortFilter"; type: "bool" }
        Property { name: "filterCaseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "sortCaseSensitivity"; type: "Qt::CaseSensitivity" }
        Property { name: "isSortLocaleAware"; type: "bool" }
        Property { name: "sortRole"; type: "int" }
        Property { name: "filterRole"; type: "int" }
        Method {
            name: "setFilterRegExp"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterWildcard"
            Parameter { name: "pattern"; type: "string" }
        }
        Method {
            name: "setFilterFixedString"
            Parameter { name: "pattern"; type: "string" }
        }
        Method { name: "clear" }
        Method { name: "invalidate" }
    }
    Component {
        name: "SingleAlbumProxyModel"
        prototype: "AbstractMediaProxyModel"
        exports: ["org.kde.elisa/SingleAlbumProxyModel 1.0"]
        exportMetaObjectRevisions: [0]
        Signal {
            name: "trackToEnqueue"
            Parameter { name: "newTracks"; type: "QList<MusicAudioTrack>" }
            Parameter { name: "enqueueMode"; type: "ElisaUtils::PlayListEnqueueMode" }
            Parameter { name: "triggerPlay"; type: "ElisaUtils::PlayListEnqueueTriggerPlay" }
        }
        Method { name: "enqueueToPlayList" }
        Method { name: "replaceAndPlayOfPlayList" }
        Method {
            name: "loadAlbumData"
            Parameter { name: "databaseId"; type: "qulonglong" }
        }
    }
    Component {
        name: "SingleArtistProxyModel"
        prototype: "AbstractMediaProxyModel"
        exports: ["org.kde.elisa/SingleArtistProxyModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "artistFilter"; type: "string" }
        Signal {
            name: "albumToEnqueue"
            Parameter { name: "newAlbums"; type: "QList<MusicAlbum>" }
            Parameter { name: "enqueueMode"; type: "ElisaUtils::PlayListEnqueueMode" }
            Parameter { name: "triggerPlay"; type: "ElisaUtils::PlayListEnqueueTriggerPlay" }
        }
        Signal {
            name: "artistFilterTextChanged"
            Parameter { name: "filterText"; type: "string" }
        }
        Method { name: "enqueueToPlayList" }
        Method { name: "replaceAndPlayOfPlayList" }
        Method {
            name: "setArtistFilterText"
            Parameter { name: "filterText"; type: "string" }
        }
    }
    Component {
        name: "TopNotificationManager"
        prototype: "QAbstractListModel"
        exports: ["org.kde.elisa/TopNotificationManager 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ColumnsRoles"
            values: {
                "MessageRole": 257,
                "MainButtonTextRole": 258,
                "MainButtonIconNameRole": 259,
                "SecondaryButtonTextRole": 260,
                "SecondaryButtonIconNameRole": 261
            }
        }
        Property { name: "countNotifications"; type: "int"; isReadonly: true }
        Property { name: "notificationMessage"; type: "string"; isReadonly: true }
        Property { name: "notificationMainButtonText"; type: "string"; isReadonly: true }
        Property { name: "notificationMainButtonIconName"; type: "string"; isReadonly: true }
        Property { name: "notificationSecondaryButtonText"; type: "string"; isReadonly: true }
        Property { name: "notificationSecondaryButtonIconName"; type: "string"; isReadonly: true }
        Method {
            name: "addNotification"
            Parameter { name: "notification"; type: "NotificationItem" }
        }
        Method {
            name: "closeNotification"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "closeNotificationById"
            Parameter { name: "notificationId"; type: "string" }
        }
        Method {
            name: "triggerMainButton"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "triggerSecondaryButton"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "TrackDataHelper"
        prototype: "QObject"
        exports: ["org.kde.elisa/TrackDataHelper 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "trackData"; type: "MusicAudioTrack" }
        Property { name: "title"; type: "string"; isReadonly: true }
        Property { name: "artist"; type: "string"; isReadonly: true }
        Property { name: "albumName"; type: "string"; isReadonly: true }
        Property { name: "albumArtist"; type: "string"; isReadonly: true }
        Property { name: "genre"; type: "string"; isReadonly: true }
        Property { name: "composer"; type: "string"; isReadonly: true }
        Property { name: "lyricist"; type: "string"; isReadonly: true }
        Property { name: "comment"; type: "string"; isReadonly: true }
        Property { name: "year"; type: "string"; isReadonly: true }
        Property { name: "trackNumber"; type: "string"; isReadonly: true }
        Property { name: "discNumber"; type: "string"; isReadonly: true }
        Property { name: "channels"; type: "string"; isReadonly: true }
        Property { name: "bitRate"; type: "string"; isReadonly: true }
        Property { name: "sampleRate"; type: "string"; isReadonly: true }
        Property { name: "resourceURI"; type: "string"; isReadonly: true }
        Property { name: "duration"; type: "string"; isReadonly: true }
        Property { name: "rating"; type: "int"; isReadonly: true }
        Property { name: "albumCover"; type: "QUrl"; isReadonly: true }
        Property { name: "databaseId"; type: "qulonglong"; isReadonly: true }
        Method { name: "hasValidTitle"; type: "bool" }
        Method { name: "hasValidArtist"; type: "bool" }
        Method { name: "hasValidAlbumName"; type: "bool" }
        Method { name: "hasValidAlbumArtist"; type: "bool" }
        Method { name: "hasValidGenre"; type: "bool" }
        Method { name: "hasValidComposer"; type: "bool" }
        Method { name: "hasValidLyricist"; type: "bool" }
        Method { name: "hasValidComment"; type: "bool" }
        Method { name: "hasValidTrackNumber"; type: "bool" }
        Method { name: "hasValidDiscNumber"; type: "bool" }
        Method { name: "hasValidChannels"; type: "bool" }
        Method { name: "hasValidRating"; type: "bool" }
        Method { name: "hasValidBitRate"; type: "bool" }
        Method { name: "hasValidSampleRate"; type: "bool" }
        Method { name: "hasValidYear"; type: "bool" }
        Method { name: "hasValidAlbumCover"; type: "bool" }
    }
}
